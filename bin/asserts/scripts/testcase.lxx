-- test function
function foo1()
    return 1
end
assert( foo1() == 1 )
local function add ( a , b )
    return a + b
end

assert( add( 1 , 2 ) == 3 )

g = 100
local a = '12'
a = 1
local b = 2
local c = a..b
assert( c == '12')
assert(a == 1)
a = 1 + 2
assert(a == 3)
a = a + 1
assert(a == 4)
a = a - 1
assert(a == 3)
a = a * 2
assert(a == 6)
a = a / 2
assert(a == 3)
a = 9 // 2
assert(a == 4)
a = 9 % 2
assert(a == 1)
a = 1 << 1
assert( a == 2 )
a = a >> 1
assert( a == 1 )
a = 0xff
b = 0xffff
c = a & b
assert( c == 0xff )
a = 0b101
b = 0b010
c = a | b
assert( c == 0b111 )
a = 0b110
b = 0b001
c = a ~ b
assert( c == 0b111 )
a = 2 ^ 2
assert( a == 4 and c == 0b111 )
assert( a == 4 or c == 0b111 )


-- test if statement
if ( a == 4 ) then
    a = 5
end
assert( a == 5 )
if ( a == 4 ) then
    a = 5
else
    a = 4
end
assert( a == 4 )

a = 1
if ( a == 1 ) then
    a = 2
elseif ( a == 2 ) then
    a = 3
elseif ( a == 3 ) then
    a = 4
end
assert( a == 2 )
